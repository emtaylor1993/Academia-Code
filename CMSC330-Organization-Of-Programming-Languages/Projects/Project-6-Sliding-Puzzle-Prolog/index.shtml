<!--#include virtual="header.html" -->

<body>

<h1 class="title">Project 6 - Sliding Puzzle in Prolog</h1>
<center>
Due 11:59pm Wed, Dec 11th, 2013
</center>

<p>

</center>

<p>
</p><h2>Introduction</h2>

<p>
For this project you will need to implement a number of 
functions in Prolog that together can be used to find 
solutions for a sliding puzzle.  This project will provide
experience dealing with logic, recursion, lists, and 
other features in Prolog.

</p><h2>Sliding Puzzle</h2>
<p>
A <a href="http://en.wikipedia.org/wiki/Fifteen_puzzle">sliding puzzle</a> 
(or n-puzzle) consists of a frame of 
numbered square tiles in random order with one tile missing.
Tiles adjacent to the space may be moved into the space,
rearranging tiles until the tiles are all in order.
<p>
For this project we represent the tiles in a sliding puzzle
as numbers in a list, with 0 as the space.  We'll assume
all puzzles are square.  For this project we'll assume 
a puzzle is solved when the space is in the top left 
corner of the puzzle, with tile numbers sorted in 
order from left to right and top to bottom.
<p>
Positions in the 2-D puzzle are
linearized to a 1-D list so that rows are contiguous (row-major). 
For instance, the following solved 3x3 puzzle is linearized 
as [0;1;2;3;4;5;6;7;8].

<p>
<table border="1">
<tr>
<td> 
<td>1
<td>2
<tr>
<td>3
<td>4
<td>5
<tr>
<td>6
<td>7
<td>8
</table>

<p>
In other words, the x,y coordinates of a position in the n-puzzle are assigned as follows:

<p>
<table>
<tr>

<td>
<table border="1">
<tr>
<td>(0,0)
<td>(0,1)
<td>(0,2)
<tr>
<td>(1,0)
<td>(1,1)
<td>(1,2)
<tr>
<td>(2,0)
<td>(2,1)
<td>(2,2)
</table>
</td>

<td>
=
</td>

<td>
<table border="1">
<tr>
<td>(0,0)
<td>(0,1)
<td>(0,2)
<td>(1,0)
<td>(1,1)
<td>(1,2)
<td>(2,0)
<td>(2,1)
<td>(2,2)
</table>
</td>

<td>
=
</td>

<td>
<table border="1">
<tr>
<td>0
<td>1
<td>2
<td>3
<td>4
<td>5
<td>6
<td>7
<td>8
</table>
</td>
</tr>
</table>

<p><b>Importantly</b>: Notice that the origin (0,0) is in the upper
  left, and the coordinate pair (x,y) indicates the position x
  moves <i>down</i> and y moves to the <i>right</i> of the origin.  If
  you don't follow this arrangement, some of your position functions
  below will produce the wrong answers.</p>

</p><h2>Getting Started</h2>

Download the following archive file <a href="p6.zip">p6.zip</a>
and extract its contents.
<p>
Along with files used to make direct submissions to the
submit server (submit.jar, .submit, submit.rb), you will
find the following project files:
</p><ul>
<li>Your Prolog program - <a href="puzzle.pl">puzzle.pl</a>
</li><li>Public tests
<ul>
<li> <a href="publicRecursion1.pl">publicRecursion1.pl</a>
<li> <a href="publicRecursion2.pl">publicRecursion2.pl</a>
<li> <a href="publicPuzzle.pl">publicPuzzle.pl</a>
<li> <a href="publicSolve.pl">publicSolve.pl</a>
</li></ul>
</li><li>Expected outputs for public tests
<ul>
<li> <a href="publicRecursion1.out">publicRecursion1.out</a>
<li> <a href="publicRecursion2.out">publicRecursion2.out</a>
<li> <a href="publicPuzzle.out">publicPuzzle.out</a>
<li> <a href="publicSolve.out">publicSolve.out</a>
</li></ul>
</ul>
<p>

The puzzle.pl file you downloaded contains a number of 
utility functions, and comments describing the functions
you are required to implement.  

<p>

Note that you must implement your functions with the exact
parameters specified, or else the submit server
tests will fail.

<p>

For this project you should write most code yourself, and
only use Prolog's built-in and library functions where
absolutely necessary.  You are not allowed to use any 
library or built-in functions unless they are explicitly 
listed as permitted functions. The only built-in function
that you are allowed to use for this project are:

<p>
<table border="1">
<tr>
<td align="center"> <b>Type</b>
<td align="center"> <b>Built-in Function</b>
</tr>
<tr> 
<td align="center"> Arithmetic 
<td align="center">   +, -, *, div, mod, <, <=, >, >=, is, =:=
<tr> 
<td align="center"> Logic 
<td align="center">  ==, =, \==, \=, \+
<tr> 
<td align="center"> List 
<td align="center">  [H|T], [H1,H2|T]
<tr> 
<td align="center"> Cut 
<td align="center"> !
</table>

<p>

Since many functions you need to implement are similar to
those from Project 3, you may find it useful to examine your
OCaml solutions from the previous project when writing your 
solution in Prolog.

<p>

<h2>Part 1: Recursion </h2>

Write the following recursive functions:
<p>

<table border="1">

<tr>
<td> <b>Name</b>
<td> <b>Parameters</b>
<td> <b>Example</b>
</tr>

<tr>
<td> get_val(X,N,R) 
<td> 
X=list<br>
N=int<br>
R=element of list X at index N (index starts at 0)<br>
&bull; 
Return false if N is outside the bounds of the list
<td> 
?- get_val([5,6,7,3],1,R).<br> R=6. <br>
?- get_val([5,6,7,3],5,R).<br> false.
</tr>

<tr>
<td> get_vals(X,Y,R)
<td> 
X=list<br>
Y=list<br>
R=list of elements of list X at indices in list Y<br>
&bull; 
Return false if any indices in Y are outside the bounds of X
<td> 
?- get_vals([5,6,7,3],[2,0],R).<br> R=[7,5].<br>
?- get_vals([5,6,7,3],[2,5],R).<br> false.
</tr>

<tr>
<td> set_n(X,N,V,R) 
<td> 
X=list<br>
N=int<br>
V=value<br>
R=list produced by setting N'th element of list X to value V, <br>
or just X if N is outside the bounds of the list 
<td> 
?- set_n([5,6,7,3],1,9,R).<br> R=[5,9,7,3].<br>
?- set_n([5,6,7,3],5,9,R).<br> R=[5,6,7,3].
</tr>

<tr>
<td> list_swap_val(B,U,V,R) 
<td>
B=list<br>
U=value<br>
V=value<br>
R=list produced by swapping all values of U and V in list B <br> 
&bull; 
Change value of multiple occurrences of U and/or V, if found  <br>
&bull; 
Change value for U even if V not found in list, and vice versa
<td> 
?- list_swap_val([5,6,7,3],7,5,R).<br> R=[7,6,5,3].<br>
?- list_swap_val([5,6,3],7,5,R).<br> R=[7,6,3].
</tr>

<tr>
<td> index(X,V,R)
<td>
X=list<br>
V=value<br>
R=index of value V in list X (index starts at 0)<br>
&bull; 
If multiple occurrences of V exist in X, return their indices <br>
from left to right<br>
&bull; 
Return false if not found
<td> 
?- index([5,6,7,3],7,R).<br> R=2.<br>
?- index([5,6,7,7,4],7,R).<br> R=2;<br>R=3.<br>
?- index([5,6],7,R).<br> false.
</tr>
</tr>
</table>

<h2>Part 2: Puzzle solver </h2>

<p>
Write the following function for solving a sliding puzzle.
Your solution must be efficient enough to solve 4x4 puzzles 
under 10 moves within 3 seconds on the submit server (we
will also test it on larger puzzles/solutions). 
You may assume that all boards are legal, and the largest
puzzle you will be tested on is 8x8.
<p>

<table border="1">

<tr>
<td> <b>Name</b>
<td> <b>Parameters</b>
<td> <b>Example</b>
</tr>

<tr>
<td> move_pos(B,R)
<td>
B=list<br>
R=position in board B that can move to space in board<br>
&bull; 
If multiple positions possible, may return in any order
<td> ?- move_pos([0,1,2,3,4,5,6,7,8],R).<br> R=1;<br> R=3.
</tr>

<tr>
<td> make_move(B,X,R)
<td>
B=list<br>
X=int<br>
R=configuration of board B after moving number at <br>position X to space<br> 
&bull; 
May assume position X is adjacent to space
<td> ?- make_move([0,1,4,5,2,3,6,7,8],3,R).<br> R=[5,1,4,0,2,3,6,7,8].
</tr>

<tr>
<td> make_moves(B,R)
<td>
B=list<br>
R=board produced after 1-step move for board b<br> 
&bull; 
If multiple boards possible, may return in any order
<td> ?- make_moves([0,1,2,3,4,5,6,7,8],R).<br> 
R=[1,0,2,3,4,5,6,7,8];<br>
R=[3,1,2,0,4,5,6,7,8].<br>
</tr>

<tr>
<td> solve_board(B,N,R)
<td>
B=list<br>
N=int<br>
R=<i>solution</i> of board B having <i>length</i> N or less<br>
&bull; 
If multiple solutions possible, may return in any order
<td> ?- solve_board([1,2,0,3,4,5,6,7,8],2,R).<br> 
R=[[0,1,2,3,4,5,6,7,8],[1,0,2,3,4,5,6,7,8],[1,2,0,3,4,5,6,7,8]].
</tr>

</table>

<p>A <i>solution</i> to solve_board is a list of boards produced by
moves starting from b until the solved board is reached.  The list is
in reverse order: solved board first, b last.  

<p> The <i>length</i> l of each
solution is the number of moves (i.e., one less than the length of the
list that represents the solution).  

<p> Solutions are not permitted to
contain the same board position twice.  For example,
[[0,1,2,3,4,5,6,7,8],[1,0,2,3,4,5,6,7,8],[0,1,2,3,4,5,6,7,8],[1,0,2,3,4,5,6,7,8],[1,2,0,3,4,5,6,7,8]]
is not a legal length-4 solution to [1,2,0,3,4,5,6,7,8].</p>

<p>
<i>Hints</i>: 

<ul>
<li> As you are required to produce <i>all</i>
solutions up to length N, you are essentially doing an exhaustive
search with a bit of smarts to prune out solutions that are too
long or contain duplicate boards.  
<li> At each step you will want to look for a new board produced 
by a legal move from the most recent board in the current partial 
solution.  
<li> You will need to avoid adding a new board to the current
partial solution, if the board is already part of the partial 
solution (i.e., repeating a previous board position).
<li>
You will also need to recognize when the partial solution has
reached the length limit.
<li> You should be making good use of the functions you have 
already defined above.  If your solution is not using many of 
these functions, you are doing too much work!
<li> Unlike project 3, you do not need to maintain a list of all 
possible solutions. It will be simpler to look for one solution, and
rely on Prolog's backtracking to find all possible solutions
through multiple queries.
</ul>

<h3>Helper Functions</h3>

The following helper functions are provided for your use if desired.
<p>

<table border="1">

<tr>
<td> <b>Name</b>
<td> <b>Parameters</b>
<td> <b>Example</b>
</tr>

<tr>
<td> is_sorted(X)
<td> X=list<br>
&bull; true if list X is in sorted order<br>
&bull; false otherwise
<td> 
?- is_sorted([0,1,2,3]).<br> true.<br>
?- is_sorted([1,0,2,3]).<br> false.
</tr>

<tr>
<td> len(X,R)
<td> X=list<br>
R=length of list X
<td> 
?- len([0,1,2,3],R).<br> 
R=4.<br>
</tr>

<tr>
<td> find_board_size(B,R)
<td> B=list representing board<br>
R=board size (that is, the length/width of a side) of board B 
<td> ?- find_board_size([1,0,2,3,4,5,6,7,8]).<br> R=3.
</tr>

<tr>
<td> pos_of_xy(X,Y,S,R)
<td> 
X=X coordinate (down)<br>
Y=Y coordinate (right) <br>
S=board size <br>
R=position of (X,Y) in board of size S<br>
&bull; false if X or Y is out of bounds (i.e., < 0 or > S-1)
<td> ?- pos_of_xy(1,2,3,R).<br> R=5.
</tr>

<tr>
<td> xy_of_pos (P,S,X,Y)
<td>
P=position<br>
S=board size <br>
X=X coordinate (down) of position P in board of size S<br>
Y=Y coordinate (right) of position P in board of size S <br>
<td> ?- xy_of_pos(5,3,X,Y).<br> X=1, <br> Y=2.
</tr>
</tr>

</table>


<h2>Submission</h2>

You can submit your project in two ways:

<ul>
<li>
Submit your puzzle.ml file directly to the 
<a href="http://submit.cs.umd.edu/">submit server</a> 
by clicking on the submit link in the column "web submission".

<p>
<img src="submit1.jpg">
</p><p>

Next, use the submit dialog to submit your puzzle.ml file directly.

</p><p>
<img src="submit2.jpg">
</p><p>

Select your file using the "Browse" button, 
then press the "Submit project!" button.  
You <b>do not</b> need to put it in a Jar or Zip file.
Some students have mentioned problems 
with using Internet Explorer, because 
submissions being extracted in directories
(e.g., "C:\My Documents\330\puzzle.ml") where
the submit server could not find them.  The
problems went away when switching to the 
Mozilla Firefox browser.

</p><p>
</p></li><li>

</li><li>
Submit directly by executing a Java program on a computer
with Java and network access.  Use the submit.jar file 
from the archive <a href="http://www.cs.umd.edu/class/fall2013/cmsc330/p6/p6.zip">p6.zip</a>, 
To submit, go to the directory containing your project, then either
execute submit.rb or type the following command directly:
<p> 

</p><center>
<tt>
java -jar submit.jar
</tt>
</center>
<p>

You will be asked to enter your class account and password, then
all files in the directory (and its subdirectories) will be
put in a jar file and submitted to the submit server.  
If your submission is successful you will see the message:
</p><p> 

</p><center>
<tt>
Successful submission #<submission_number> received for project 6
</submission_number></tt>
</center>
<p>

</p></li></ul>

<h2>Academic Integrity</h2>

<p>
The Campus Senate has adopted a policy asking students to include the
following statement on each assignment in every course: "I pledge on
my honor that I have not given or received any unauthorized assistance
on this assignment."  Consequently your program is requested to
contain this pledge in a comment near the top.

</p><p>
Please <b>carefully read</b> the academic honesty section of the
course syllabus.  <b>Any evidence</b> of impermissible cooperation on
projects, use of disallowed materials or resources, or unauthorized
use of computer accounts, <b>will be submitted</b> to the Student
Honor Council, which could result in an XF for the course, or
suspension or expulsion from the University.  Be sure you understand
what you are and what you are not permitted to do in regards to
academic integrity when it comes to project assignments.  These
policies apply to all students, and the Student Honor Council does not
consider lack of knowledge of the policies to be a defense for
violating them.  Full information is found in the course
syllabus---please review it at this time.


</p></li></td>
</tr></tbody></table>

</body></html>
